# app.py
from flask import Flask, request, jsonify
from qdrant_client import QdrantClient
import requests
import logging
import os
import traceback # Para un logging de errores m√°s detallado

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# Configuraci√≥n desde variables de entorno
QDRANT_HOST = os.getenv('QDRANT_HOST', 'localhost')
QDRANT_PORT = int(os.getenv('QDRANT_PORT', '6333'))
OLLAMA_HOST = os.getenv('OLLAMA_HOST', 'localhost')
OLLAMA_PORT = int(os.getenv('OLLAMA_PORT', '11434'))
COLLECTION_NAME = os.getenv('COLLECTION_NAME', 'documents') # Aseg√∫rate de que esta colecci√≥n exista en Qdrant
EMBEDDING_MODEL = os.getenv('EMBEDDING_MODEL', 'nomic-embed-text') # Aseg√∫rate de que este modelo est√© en Ollama

# Inicializar clientes
try:
    qdrant_client = QdrantClient(host=QDRANT_HOST, port=QDRANT_PORT, timeout=10) # A√±adido timeout
    logger.info(f"‚úÖ Conectado exitosamente a Qdrant: {QDRANT_HOST}:{QDRANT_PORT}")
except Exception as e:
    logger.error(f"‚ùå FALLO AL CONECTAR CON QDRANT: {QDRANT_HOST}:{QDRANT_PORT} - {e}")
    qdrant_client = None # Marcar como no disponible

ollama_url = f"http://{OLLAMA_HOST}:{OLLAMA_PORT}"

logger.info(f"üîó Intentando conectar a Ollama: {OLLAMA_HOST}:{OLLAMA_PORT}")
logger.info(f"üß† Modelo de embeddings (Ollama): {EMBEDDING_MODEL}")
logger.info(f"üì¶ Colecci√≥n Qdrant: {COLLECTION_NAME}")

def get_embedding(text: str, attempt=1, max_attempts=3):
    """Obtener embedding usando Ollama con reintentos."""
    try:
        logger.info(f"üîÑ Obteniendo embedding para texto (intento {attempt}/{max_attempts}): '{text[:50]}...'")
        response = requests.post(
            f"{ollama_url}/api/embeddings",
            json={
                "model": EMBEDDING_MODEL,
                "prompt": text,
                # "keep_alive": "5m" # Opcional: puede ayudar a mantener el modelo cargado en Ollama
            },
            timeout=30  # Timeout para la petici√≥n de embedding
        )
        response.raise_for_status()
        embedding = response.json().get("embedding")
        if not embedding:
            logger.error(f"‚ùå Embedding vac√≠o recibido de Ollama para el modelo {EMBEDDING_MODEL}.")
            raise ValueError("Embedding vac√≠o recibido de Ollama")
        logger.info(f"üëç Embedding obtenido exitosamente (longitud: {len(embedding)})")
        return embedding
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå Error de red obteniendo embedding (intento {attempt}/{max_attempts}): {e}")
        if attempt < max_attempts:
            logger.info(f"Retrying embedding generation for: '{text[:50]}...'")
            return get_embedding(text, attempt + 1, max_attempts)
        raise
    except Exception as e:
        logger.error(f"‚ùå Error inesperado obteniendo embedding (intento {attempt}): {e}")
        logger.error(traceback.format_exc())
        if attempt < max_attempts and not isinstance(e, ValueError): # No reintentar si el embedding est√° vac√≠o
            logger.info(f"Retrying embedding generation for: '{text[:50]}...'")
            return get_embedding(text, attempt + 1, max_attempts)
        raise

@app.route('/health', methods=['GET'])
def health():
    """Endpoint de salud"""
    service_status = {"status": "healthy"}
    http_status_code = 200

    # Verificar conexi√≥n a Qdrant
    if qdrant_client:
        try:
            qdrant_client.get_collections() # Una operaci√≥n ligera para verificar la conexi√≥n
            service_status["qdrant_connection"] = "ok"
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Problema de conexi√≥n con Qdrant en health check: {e}")
            service_status["qdrant_connection"] = "error"
            service_status["qdrant_error"] = str(e)
            service_status["status"] = "degraded"
            # http_status_code = 503 # Service Unavailable
    else:
        service_status["qdrant_connection"] = "unavailable (failed to initialize)"
        service_status["status"] = "degraded"
        # http_status_code = 503

    # Verificar conexi√≥n a Ollama (y si el modelo de embedding existe)
    try:
        ollama_models_response = requests.get(f"{ollama_url}/api/tags", timeout=10)
        ollama_models_response.raise_for_status()
        models_data = ollama_models_response.json()
        available_models = [m.get("name") for m in models_data.get("models", [])]
        if any(EMBEDDING_MODEL in m_name for m_name in available_models):
            service_status["ollama_connection"] = "ok"
            service_status["ollama_embedding_model_found"] = True
        else:
            service_status["ollama_connection"] = "ok"
            service_status["ollama_embedding_model_found"] = False
            service_status["ollama_embedding_model_warning"] = f"Modelo '{EMBEDDING_MODEL}' no encontrado en Ollama. Modelos disponibles: {available_models}"
            service_status["status"] = "degraded"
            # http_status_code = 503

    except requests.exceptions.RequestException as e:
        logger.warning(f"‚ö†Ô∏è Problema de conexi√≥n con Ollama en health check: {e}")
        service_status["ollama_connection"] = "error"
        service_status["ollama_error"] = str(e)
        service_status["status"] = "degraded"
        # http_status_code = 503
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Error inesperado en health check de Ollama: {e}")
        service_status["ollama_connection"] = "error_unexpected"
        service_status["ollama_error"] = str(e)
        service_status["status"] = "degraded"


    service_status["qdrant_target_collection"] = COLLECTION_NAME
    service_status["embedding_model_configured"] = EMBEDDING_MODEL
    
    # Si alg√∫n componente cr√≠tico falla, el estado general deber√≠a ser unhealthy
    if service_status.get("qdrant_connection") != "ok" or \
       service_status.get("ollama_connection") != "ok" or \
       not service_status.get("ollama_embedding_model_found", False):
        http_status_code = 503 # Service Unavailable

    return jsonify(service_status), http_status_code

@app.route('/search', methods=['POST'])
def search():
    """Endpoint principal de b√∫squeda"""
    if not qdrant_client:
        logger.error("‚ùå Qdrant client no est√° disponible. No se puede realizar la b√∫squeda.")
        return jsonify({
            "error": "Servicio de base de datos no disponible",
            "details": "El cliente Qdrant no pudo inicializarse."
        }), 503

    try:
        data = request.get_json()
        if not data or 'query' not in data:
            return jsonify({"error": "Campo 'query' requerido", "example": {"query": "servicios del hotel"}}), 400
        
        query = data['query'].strip()
        if not query:
            return jsonify({"error": "La consulta no puede estar vac√≠a"}), 400
        
        limit = int(data.get('limit', 5))
        score_threshold = float(data.get('score_threshold', 0.3)) # Umbral un poco m√°s bajo por defecto
        
        logger.info(f"üîç B√∫squeda recibida: '{query}' (limit={limit}, threshold={score_threshold})")
        
        query_embedding = get_embedding(query)
        
        logger.info(f"üîé Buscando en Qdrant (colecci√≥n: {COLLECTION_NAME}) con {len(query_embedding)} dimensiones de vector.")
        search_results = qdrant_client.search(
            collection_name=COLLECTION_NAME,
            query_vector=query_embedding,
            limit=limit,
            score_threshold=score_threshold,
            # with_payload=True # Aseg√∫rate de que esto est√© impl√≠cito o expl√≠cito si es necesario
        )
        
        if not search_results and score_threshold > 0.0: # Solo reintenta si hab√≠a un threshold
            logger.warning(f"‚ö†Ô∏è Sin resultados con threshold={score_threshold}. Reintentando sin filtro de score (limit={limit})...")
            search_results = qdrant_client.search(
                collection_name=COLLECTION_NAME,
                query_vector=query_embedding,
                limit=limit,
                # score_threshold=0.0 # Opcional: o simplemente no lo pases si tu cliente Qdrant lo maneja
            )
        
        documents = []
        for result in search_results:
            doc_payload = result.payload if result.payload else {}
            doc = {
                "id": result.id, # Incluir el ID del punto puede ser √∫til
                "text": doc_payload.get("text", doc_payload.get("page_content", "")), # Comprobar 'page_content' como fallback
                "filename": doc_payload.get("filename", doc_payload.get("source", "")), # Comprobar 'source'
                "score": round(result.score, 4),
                "chunk_index": doc_payload.get("chunk_index", 0),
                "file_type": doc_payload.get("file_type", "")
                # A√±ade cualquier otro campo del payload que quieras devolver
            }
            documents.append(doc)
        
        response_data = {
            "query": query,
            "results": documents,
            "total_results": len(documents),
            "parameters": {
                "limit_used": limit, # Lo que se us√≥ en la √∫ltima b√∫squeda
                "score_threshold_requested": data.get('score_threshold', 0.3), # Lo que se pidi√≥
                "score_threshold_applied_initially": score_threshold # Lo que se aplic√≥ primero
            }
        }
        
        logger.info(f"‚úÖ B√∫squeda completada. Encontrados {len(documents)} documentos para la consulta '{query}'.")
        return jsonify(response_data)
        
    except Exception as e:
        logger.error(f"‚ùå Error catastr√≥fico en la b√∫squeda: {e}")
        logger.error(traceback.format_exc()) # Log completo del traceback
        return jsonify({
            "error": "Error interno del servidor durante la b√∫squeda.",
            "details": str(e)
        }), 500

if __name__ == '__main__':
    # Es mejor no usar debug=True en producci√≥n real.
    # Para producci√≥n, considera un servidor WSGI como Gunicorn o uWSGI.
    app.run(host='0.0.0.0', port=8080, debug=os.getenv('FLASK_DEBUG', 'False').lower() == 'true')