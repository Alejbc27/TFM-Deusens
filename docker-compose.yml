version: "3.8"

services: 
  postgres:
    container_name: postgres_container
    build:
      context: .
      dockerfile: src/database/Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-hotel_barcelo_db}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres  
    restart: unless-stopped

  database_generator:
    container_name: database_generator_container
    build:
      context: ./src/generator
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/hotel_barcelo_db}
    depends_on:
      - postgres
    networks:
      - postgres  
    restart: no

  api:
    container_name: hotel_api_container
    build:
      context: ./src  
      dockerfile: api/api-booking/Dockerfile
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/hotel_barcelo_db}
      FLASK_ENV: ${FLASK_ENV:-development}
      FLASK_DEBUG: ${FLASK_DEBUG:-True}
    ports:
      - "8000:8000"
    depends_on:
      database_generator:
        condition: service_completed_successfully
    networks:
      - postgres
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:9.0
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    volumes:
      - pgadmin:/root/.pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - postgres  
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"  # Puerto gRPC (opcional)
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__WEB_UI__ENABLED=true  # Ya incluye interfaz web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - rag-network

  ollama:
    build:
      context: ./src/ollama
      dockerfile: Dockerfile
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_ORIGINS=*
      - MODELS_TO_DOWNLOAD=nomic-embed-text,all-minilm,llama3.2:1b
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 120s
    restart: unless-stopped
    networks:
      - rag-network

  rag-loader:
    build:
      context: ./src/rag_loader
      dockerfile: Dockerfile
    container_name: rag-loader
    volumes:
      - ./src/rag_loader/documents:/app/documents:ro
    environment:
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - OLLAMA_HOST=ollama
      - OLLAMA_PORT=11434
      - COLLECTION_NAME=documents
      - EMBEDDING_MODEL=nomic-embed-text:latest
      - CHUNK_SIZE=500
      - CHUNK_OVERLAP=100
    depends_on:
      - qdrant
      - ollama
    restart: "no"
    networks:
      - rag-network
  search-api:
    build:
      context: ./src/api/api_rag
      dockerfile: Dockerfile
    container_name: barcelo-search-api
    ports:
      - "8080:8080"
    environment:
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - OLLAMA_HOST=ollama
      - OLLAMA_PORT=11434
      - COLLECTION_NAME=documents
      - EMBEDDING_MODEL=nomic-embed-text
    depends_on:
      - qdrant
      - ollama
    networks:
      - rag-network
    restart: unless-stopped

networks:
  postgres:
    driver: bridge
  rag-network:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  data:
  db_data:
  qdrant_data:
  ollama_data:

