version: "3.8"

services:
  postgres:
    container_name: postgres_container
    build:
      context: .
      dockerfile: src/database/Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-hotel_barcelo_db}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped

  redis-stack:
    image: redis/redis-stack:latest
    container_name: redis_stack_container
    environment:
      - REDIS_ARGS=--requirepass redis_password
    volumes:
      - redis_stack_data:/data
    ports:
      - "6379:6379"
      - "8001:8001"
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "redis_password", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - rag-network
      - postgres
    restart: unless-stopped
  database_generator:
    container_name: database_generator_container
    build:
      context: ./src/generator
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/hotel_barcelo_db}
      TOTAL_GUESTS: ${TOTAL_GUESTS:-200}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - postgres
    restart: no

  api:
    container_name: hotel_api_container
    build:
      context: ./src
      dockerfile: api/api_services/Dockerfile
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/hotel_barcelo_db}
      FLASK_ENV: ${FLASK_ENV:-development}
      FLASK_DEBUG: ${FLASK_DEBUG:-True}
    ports:
      - "8000:8000"
    depends_on:
      database_generator:
        condition: service_completed_successfully
    networks:
      - postgres
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:9.4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    volumes:
      - pgadmin:/root/.pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - postgres
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__WEB_UI__ENABLED=true
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:6333/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - rag-network

  ollama:
    build:
      context: ./src/ollama
      dockerfile: Dockerfile
    container_name: ollama
    ports:
      - "11434:11434"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [ gpu ]
              count: all
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_ORIGINS=*
      - MODELS_TO_DOWNLOAD=nomic-embed-text,all-minilm,caporti/qwen3-capor
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:11434/api/tags" ]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 120s
    restart: unless-stopped
    networks:
      - rag-network

  rag-loader:
    build:
      context: ./src/rag_loader
      dockerfile: Dockerfile
    container_name: rag-loader
    volumes:
      - ./src/rag_loader/documents:/app/documents:ro
    environment:
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - OLLAMA_HOST=ollama
      - OLLAMA_PORT=11434
      - COLLECTION_NAME=documents
      - EMBEDDING_MODEL=nomic-embed-text:latest
      - CHUNK_SIZE=500
      - CHUNK_OVERLAP=100
    depends_on:
      - qdrant
      - ollama
    restart: "no"
    networks:
      - rag-network
  search-api:
    build:
      context: ./src/api/api_rag
      dockerfile: Dockerfile
    container_name: barcelo-search-api
    ports:
      - "8080:8080"
    environment:
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - OLLAMA_HOST=ollama
      - OLLAMA_PORT=11434
      - COLLECTION_NAME=documents
      - EMBEDDING_MODEL=nomic-embed-text
    depends_on:
      - qdrant
      - ollama
    networks:
      - rag-network
    restart: unless-stopped

  agent-api:
    build:
      context: .
      dockerfile: src/agents/api/Dockerfile
    container_name: agent-api
    ports:
      - "8081:8081"
    environment:
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - OLLAMA_HOST=ollama
      - OLLAMA_PORT=11434
      - COLLECTION_NAME=documents
      - EMBEDDING_MODEL=nomic-embed-text
      - GYM_API_URL=http://api:8000
      - RAG_SERVICE_URL=http://search-api:8080/
      - DATABASE_URL=postgresql+psycopg://postgres:postgres@postgres:5432/hotel_barcelo_db
      - REDIS_HOST=redis_stack_container
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_password
      - REDIS_DB=0
      - SESSION_TTL_HOURS=24
    depends_on:
      qdrant:
        condition: service_healthy
      ollama:
        condition: service_healthy
      api:
        condition: service_completed_successfully
    networks:
      - rag-network
      - postgres
    restart: unless-stopped

  grafana: 
    image: grafana/grafana:latest
    container_name: grafana_container
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-Admin2425!}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - postgres
    restart: unless-stopped

networks:
  postgres:
    driver: bridge
  rag-network:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  data:
  db_data:
  qdrant_data:
  ollama_data:
  redis_stack_data:
  grafana_data:
